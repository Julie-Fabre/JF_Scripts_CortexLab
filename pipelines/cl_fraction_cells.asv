%keepVis = 0;
%passive = 0;
%goNogo = 1;
keep passive goNogo keepVis

if passive
    task_data_here = load('/home/julie/Dropbox/MATLAB/task_data_passive.mat');
    idx = 5; %2: task, 4/5 : passive

elseif goNogo
    task_data_here = load('/home/julie/Dropbox/MATLAB/task_data_goNogo3.mat');
    idx = 2; %2: task, 4/5 : passive
else
    task_data_here = load('/home/julie/Dropbox/MATLAB/task_data_gogogo.mat');
    idx = 2; %2: task, 4/5 : passive

end

plot_regions = [1, 2, 3]; %[1, 2, 5]; % Striatum, GPe, SNr
for iSession = 1:size(task_data_here.av_per_trial, 2)
    session_nCells(iSession) = size(task_data_here.av_per_trial{idx, iSession}, 1);
end
session_nCells = [1, session_nCells];
[~, nonZero_idx] = find(session_nCells > 0);
trialTypes = [4, -90; 12, -90; 6, -90]; %go1, go2, no go
session_cumCells = cumsum(session_nCells);

clearvars d_prime pooled_sd_all ci
thesePairs = [1, 2; 1, 3; 2, 3];

unitCount = 0;

for iRegion = 1:size(plot_regions, 2)
    if keepVis
        these_units = task_data_here.unit_area == iRegion & ...
            (task_data_here.unitType' == 1 | task_data_here.unitType' == 2) & ...
            task_data_here.pvalue_shuffled_005{1, idx}' == 1;
    else
        these_units = task_data_here.unit_area == iRegion & ...
            (task_data_here.unitType' == 1 | task_data_here.unitType' == 2); % & ...
        %task_data_here.pvalue_shuffled_005{1,idx}' == 1;
    end
    unitCount = 0;
    for iSession = 1:size(nonZero_idx, 2) - 1
        thisSession = nonZero_idx(iSession+1) - 1;
        trials_no_move = task_data_here.trial_types{idx, thisSession}(task_data_here.no_move_trials{idx, thisSession}, :);
        %these_units_session = these_units(cumsum_cells(iSession):cumsum_cells(iSession+1));


        if ~isempty(trials_no_move)
            theseTrials = ismember(trials_no_move, trialTypes, 'rows'); %QQ
            theseTrialTypes = trials_no_move(theseTrials, :);
            these_units_session = these_units(session_cumCells(thisSession):session_cumCells(thisSession+1)-1);
            %figure();
            %i=2;
            %imagesc(squeeze(task_data_here.av_psth{idx,thisSession}(:,i,:)))
            activity_per_trial_neuron = task_data_here.av_per_trial{idx, thisSession}(these_units_session, theseTrials)';
            for_baseline_per_neuron_per_condition = task_data_here.av_psth{idx, thisSession}(these_units_session, :, 1:200);
            if size(for_baseline_per_neuron_per_condition, 2) == 39
                cond_inds = [10, 34; 16, 34; 16, 10];
            elseif size(for_baseline_per_neuron_per_condition, 2) == 26
                cond_inds = [7, 23; 11, 23; 11, 7];
            elseif size(for_baseline_per_neuron_per_condition, 2) == 4
                cond_inds = [2, 4; 3, 4; 3, 2];
            else
                disp('wtf')
            end
            clearvars increaseFR
            if ~isempty(activity_per_trial_neuron) && ~isempty(find(any(activity_per_trial_neuron > 0)))
                for iNeuron = 1:size(activity_per_trial_neuron, 2)
                    for iPair = 1:3
                        per_neuron_per_condition = squeeze(nanmean(task_data_here.av_psth{idx, thisSession}(these_units_session, :, :),2));
            
                        trials_1 = ismember(theseTrialTypes, trialTypes(thesePairs(iPair, 1), :), 'rows');
                        trials_2 = ismember(theseTrialTypes, trialTypes(thesePairs(iPair, 2), :), 'rows');

                        baseline_1 = nanmean(for_baseline_per_neuron_per_condition(iNeuron, ...
                            cond_inds(iPair, 1), :)./0.001);

                        baseline_2 = nanmean(for_baseline_per_neuron_per_condition(iNeuron, ...
                            cond_inds(iPair, 2), :)./0.001);
                        if baseline_1 > 0.5
                            average_stim_1 = (nanmean(activity_per_trial_neuron(trials_1, iNeuron)./0.001)); % QQ baseline - normalize ?
                            average_stim_2 = (nanmean(activity_per_trial_neuron(trials_2, iNeuron)./0.001));

                            sd_stim_1 = nanstd(activity_per_trial_neuron(trials_1, iNeuron)./0.001); %./sqrt(sum(trials_1));
                            sd_stim_2 = nanstd(activity_per_trial_neuron(trials_2, iNeuron)./0.001); %./sqrt(sum(trials_2));
                            
                            if size(activity_per_trial_neuron, 2) > 1
                            increaseFR(iNeuron,iPair) = abs(nanmean((per_neuron_per_condition(iNeuron,250:400) - nanmean(per_neuron_per_condition(iNeuron,1:200)) +0.0001) ./...
                                (nanmean(per_neuron_per_condition(iNeuron,1:200)) +0.0001)));
                            end
                            %increaseFR_std(iNeuron,iPair) = abs(nanmean((per_neuron_per_condition(iNeuron,:) - nanmean(per_neuron_per_condition(iNeuron,1:200)) +0.0001) ./...
                            %    (nanstd(per_neuron_per_condition(iNeuron,1:200)) +0.0001)));

                            %figure();plot(per_neuron_per_condition(iNeuron,:) )
                           
                         
                           % increaseFR_std

                          else
                           increaseFR(iNeuron,iPair)  = NaN;
                        end
                    end
                end
                for iPair = 1:3
                    try
                        increaseFR_session_fraction(iRegion, iSession, iPair) = sum(increaseFR(:,iPair) > 0.5) ./ size(increaseFR, 1);
                        
                    catch
                        increaseFR_session_fraction(iRegion, iSession, iPair) = NaN;

                    end
                end

                % figure();
                % for iPair=1:3
                %    subplot(3,1,iPair)
                %    histogram(d_prime(unitCount+1:unitCount + size(activity_per_trial_neuron,2),iPair),50) % 1.4142   -1.4142 = one of stims has 0 spikes
                %    nanmedian(d_prime(unitCount+1:unitCount + size(activity_per_trial_neuron,2),iPair))
                %    title([num2str(thesePairs(iPair,1)) ' vs ' num2str(thesePairs(iPair,2))])
                % end
                unitCount = unitCount + size(activity_per_trial_neuron, 2);
            else
               increaseFR_session_fraction(iRegion, iSession, 1:3) = NaN;
            end

        else
           increaseFR_session_fraction(iRegion, iSession, 1:3) = NaN;
        end

    end

end


% plot d pr